#!/usr/bin/env node

// Module dependencies.
const app = require('../app');
const debug = require('debug')('veritass3upload:server');
const http = require('http');

const port = normalizePort(process.env.PORT || '3000'); // Get port from environment and store in Express.
app.set('port', port);

const server = http.createServer(app); // Create HTTP server.
server.listen(port); // Listen on provided port, on all network interfaces.
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) { /** Normalize a port into a number, string, or false. **/
  const port = parseInt(val, 10);
  if (isNaN(port)) { return val; }
  if (port >= 0) { return port; }
  return false;
}

function onError(error) { // Event listener for HTTP server "error" event.
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof (port === 'string') ? (`Pipe ${port}`) : `Port ${port}`;
  switch (error.code) {  // handle specific listen errors with friendly messages
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() { /** Event listener for HTTP server "listening" event. **/
  const addr = server.address();
  const bind = typeof (addr === 'string')  ? (`pipe ${addr}`) : (`port ${addr.port}`);
  debug(`Listening on ${bind}`);
}
